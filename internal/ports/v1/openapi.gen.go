// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
	Slug    string `json:"slug"`
}

// PostReception defines model for PostReception.
type PostReception struct {
	GrapeType     string              `json:"grapeType"`
	GrapeTypeUuid openapi_types.UUID  `json:"grapeTypeUuid"`
	Sugar         int32               `json:"sugar"`
	Truck         string              `json:"truck"`
	TruckUuid     openapi_types.UUID  `json:"truckUuid"`
	Vineyard      string              `json:"vineyard"`
	VineyardkUuid *openapi_types.UUID `json:"vineyardkUuid,omitempty"`
	Weight        int32               `json:"weight"`
}

// Reception defines model for Reception.
type Reception struct {
	EndTime       *time.Time         `json:"endTime,omitempty"`
	GrapeType     string             `json:"grapeType"`
	GrapeTypeUuid openapi_types.UUID `json:"grapeTypeUuid"`
	Hash          *string            `json:"hash,omitempty"`
	StartTime     time.Time          `json:"startTime"`
	Sugar         int32              `json:"sugar"`
	Transaction   *string            `json:"transaction,omitempty"`
	Truck         string             `json:"truck"`
	TruckUuid     openapi_types.UUID `json:"truckUuid"`
	Uuid          openapi_types.UUID `json:"uuid"`
	Vineyard      string             `json:"vineyard"`
	VineyardUuid  openapi_types.UUID `json:"vineyardUuid"`
	Weight        int32              `json:"weight"`
}

// Receptions defines model for Receptions.
type Receptions struct {
	Receptions []Reception `json:"receptions"`
}

// Status defines model for Status.
type Status struct {
	Message string `json:"message"`
}

// RegisterReceptionJSONBody defines parameters for RegisterReception.
type RegisterReceptionJSONBody = PostReception

// RegisterReceptionJSONRequestBody defines body for RegisterReception for application/json ContentType.
type RegisterReceptionJSONRequestBody = RegisterReceptionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /receptions)
	GetReceptions(c *gin.Context)

	// (POST /receptions)
	RegisterReception(c *gin.Context)

	// (GET /receptions/{receptionUUID})
	GetReception(c *gin.Context, receptionUUID openapi_types.UUID)

	// (GET /status)
	Status(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetReceptions operation middleware
func (siw *ServerInterfaceWrapper) GetReceptions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetReceptions(c)
}

// RegisterReception operation middleware
func (siw *ServerInterfaceWrapper) RegisterReception(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RegisterReception(c)
}

// GetReception operation middleware
func (siw *ServerInterfaceWrapper) GetReception(c *gin.Context) {

	var err error

	// ------------- Path parameter "receptionUUID" -------------
	var receptionUUID openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "receptionUUID", c.Param("receptionUUID"), &receptionUUID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter receptionUUID: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetReception(c, receptionUUID)
}

// Status operation middleware
func (siw *ServerInterfaceWrapper) Status(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Status(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/receptions", wrapper.GetReceptions)

	router.POST(options.BaseURL+"/receptions", wrapper.RegisterReception)

	router.GET(options.BaseURL+"/receptions/:receptionUUID", wrapper.GetReception)

	router.GET(options.BaseURL+"/status", wrapper.Status)

	return router
}
