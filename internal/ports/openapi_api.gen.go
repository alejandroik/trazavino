// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /receptions)
	GetReceptions(c *gin.Context)

	// (POST /receptions)
	RegisterReception(c *gin.Context)

	// (GET /receptions/{receptionUUID})
	GetReception(c *gin.Context, receptionUUID openapi_types.UUID)

	// (GET /status)
	Status(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetReceptions operation middleware
func (siw *ServerInterfaceWrapper) GetReceptions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetReceptions(c)
}

// RegisterReception operation middleware
func (siw *ServerInterfaceWrapper) RegisterReception(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RegisterReception(c)
}

// GetReception operation middleware
func (siw *ServerInterfaceWrapper) GetReception(c *gin.Context) {

	var err error

	// ------------- Path parameter "receptionUUID" -------------
	var receptionUUID openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "receptionUUID", c.Param("receptionUUID"), &receptionUUID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter receptionUUID: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetReception(c, receptionUUID)
}

// Status operation middleware
func (siw *ServerInterfaceWrapper) Status(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Status(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/receptions", wrapper.GetReceptions)

	router.POST(options.BaseURL+"/receptions", wrapper.RegisterReception)

	router.GET(options.BaseURL+"/receptions/:receptionUUID", wrapper.GetReception)

	router.GET(options.BaseURL+"/status", wrapper.Status)

	return router
}
