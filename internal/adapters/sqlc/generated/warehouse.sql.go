// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: warehouse.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addWarehouse = `-- name: AddWarehouse :exec
INSERT INTO warehouse (id, created_at, name, is_empty)
VALUES ($1, $2, $3, $4)
`

type AddWarehouseParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Name      string
	IsEmpty   bool
}

func (q *Queries) AddWarehouse(ctx context.Context, arg AddWarehouseParams) error {
	_, err := q.db.ExecContext(ctx, addWarehouse,
		arg.ID,
		arg.CreatedAt,
		arg.Name,
		arg.IsEmpty,
	)
	return err
}

const getWarehouse = `-- name: GetWarehouse :one
SELECT id, created_at, updated_at, deleted_at, winery_id, name, is_empty
FROM warehouse
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetWarehouse(ctx context.Context, id uuid.UUID) (Warehouse, error) {
	row := q.db.QueryRowContext(ctx, getWarehouse, id)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.WineryID,
		&i.Name,
		&i.IsEmpty,
	)
	return i, err
}

const listWarehouses = `-- name: ListWarehouses :many
SELECT id, created_at, updated_at, deleted_at, winery_id, name, is_empty
FROM warehouse
ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type ListWarehousesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListWarehouses(ctx context.Context, arg ListWarehousesParams) ([]Warehouse, error) {
	rows, err := q.db.QueryContext(ctx, listWarehouses, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Warehouse
	for rows.Next() {
		var i Warehouse
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.WineryID,
			&i.Name,
			&i.IsEmpty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWarehouse = `-- name: UpdateWarehouse :exec
UPDATE warehouse
SET name       = COALESCE($2, name),
    updated_at = COALESCE($3, updated_at),
    is_empty   = COALESCE($4, is_empty)
WHERE id = $1
`

type UpdateWarehouseParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt sql.NullTime
	IsEmpty   bool
}

func (q *Queries) UpdateWarehouse(ctx context.Context, arg UpdateWarehouseParams) error {
	_, err := q.db.ExecContext(ctx, updateWarehouse,
		arg.ID,
		arg.Name,
		arg.UpdatedAt,
		arg.IsEmpty,
	)
	return err
}
