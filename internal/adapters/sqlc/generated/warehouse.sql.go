// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: warehouse.sql

package generated

import (
	"context"
	"time"
)

const addWarehouse = `-- name: AddWarehouse :one
INSERT INTO warehouse (created_at, name, is_empty)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, deleted_at, name, is_empty
`

type AddWarehouseParams struct {
	CreatedAt time.Time
	Name      string
	IsEmpty   bool
}

func (q *Queries) AddWarehouse(ctx context.Context, arg AddWarehouseParams) (Warehouse, error) {
	row := q.db.QueryRowContext(ctx, addWarehouse, arg.CreatedAt, arg.Name, arg.IsEmpty)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.IsEmpty,
	)
	return i, err
}

const getWarehouse = `-- name: GetWarehouse :one
SELECT id, created_at, updated_at, deleted_at, name, is_empty
FROM warehouse
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetWarehouse(ctx context.Context, id int64) (Warehouse, error) {
	row := q.db.QueryRowContext(ctx, getWarehouse, id)
	var i Warehouse
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.IsEmpty,
	)
	return i, err
}
