// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: grape_type.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addGrapeType = `-- name: AddGrapeType :exec
INSERT INTO grape_type (id, created_at, name)
VALUES ($1, $2, $3)
`

type AddGrapeTypeParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Name      string
}

func (q *Queries) AddGrapeType(ctx context.Context, arg AddGrapeTypeParams) error {
	_, err := q.db.ExecContext(ctx, addGrapeType, arg.ID, arg.CreatedAt, arg.Name)
	return err
}

const getGrapeType = `-- name: GetGrapeType :one
SELECT id, created_at, updated_at, deleted_at, name
FROM grape_type
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetGrapeType(ctx context.Context, id uuid.UUID) (GrapeType, error) {
	row := q.db.QueryRowContext(ctx, getGrapeType, id)
	var i GrapeType
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const listGrapeTypes = `-- name: ListGrapeTypes :many
SELECT id, created_at, updated_at, deleted_at, name
FROM grape_type
ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type ListGrapeTypesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListGrapeTypes(ctx context.Context, arg ListGrapeTypesParams) ([]GrapeType, error) {
	rows, err := q.db.QueryContext(ctx, listGrapeTypes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GrapeType
	for rows.Next() {
		var i GrapeType
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGrapeType = `-- name: UpdateGrapeType :exec
UPDATE grape_type
SET name       = $2,
    updated_at = $3
WHERE id = $1
`

type UpdateGrapeTypeParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateGrapeType(ctx context.Context, arg UpdateGrapeTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateGrapeType, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}
