// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: maceration.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const addMaceration = `-- name: AddMaceration :execresult
INSERT INTO maceration (id, created_at, reception_id, warehouse_id)
VALUES ($1, $2, $3, $4)
`

type AddMacerationParams struct {
	ID          int64
	CreatedAt   time.Time
	ReceptionID int64
	WarehouseID int64
}

func (q *Queries) AddMaceration(ctx context.Context, arg AddMacerationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addMaceration,
		arg.ID,
		arg.CreatedAt,
		arg.ReceptionID,
		arg.WarehouseID,
	)
}

const getMaceration = `-- name: GetMaceration :one
SELECT id, created_at, updated_at, deleted_at, reception_id, warehouse_id
FROM maceration
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMaceration(ctx context.Context, id int64) (Maceration, error) {
	row := q.db.QueryRowContext(ctx, getMaceration, id)
	var i Maceration
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ReceptionID,
		&i.WarehouseID,
	)
	return i, err
}
