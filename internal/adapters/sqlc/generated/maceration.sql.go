// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: maceration.sql

package generated

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addMaceration = `-- name: AddMaceration :exec
INSERT INTO maceration (id, created_at, reception_id, warehouse_id)
VALUES ($1, $2, $3, $4)
`

type AddMacerationParams struct {
	ID          uuid.UUID `db:"id"`
	CreatedAt   time.Time `db:"created_at"`
	ReceptionID uuid.UUID `db:"reception_id"`
	WarehouseID uuid.UUID `db:"warehouse_id"`
}

func (q *Queries) AddMaceration(ctx context.Context, arg AddMacerationParams) error {
	_, err := q.db.Exec(ctx, addMaceration,
		arg.ID,
		arg.CreatedAt,
		arg.ReceptionID,
		arg.WarehouseID,
	)
	return err
}

const findMaceration = `-- name: FindMaceration :one
SELECT maceration.id, maceration.created_at, maceration.updated_at, maceration.deleted_at, maceration.reception_id, maceration.warehouse_id
FROM maceration
         INNER JOIN process p on maceration.id = p.id
WHERE end_time IS NULL
  AND maceration.warehouse_id = $1
LIMIT 1
`

func (q *Queries) FindMaceration(ctx context.Context, warehouseID uuid.UUID) (Maceration, error) {
	row := q.db.QueryRow(ctx, findMaceration, warehouseID)
	var i Maceration
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ReceptionID,
		&i.WarehouseID,
	)
	return i, err
}

const getMaceration = `-- name: GetMaceration :one
SELECT id, created_at, updated_at, deleted_at, reception_id, warehouse_id
FROM maceration
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMaceration(ctx context.Context, id uuid.UUID) (Maceration, error) {
	row := q.db.QueryRow(ctx, getMaceration, id)
	var i Maceration
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ReceptionID,
		&i.WarehouseID,
	)
	return i, err
}

const listMacerations = `-- name: ListMacerations :many
SELECT id, created_at, updated_at, deleted_at, reception_id, warehouse_id
FROM maceration
ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type ListMacerationsParams struct {
	Offset int32 `db:"offset"`
	Limit  int32 `db:"limit"`
}

func (q *Queries) ListMacerations(ctx context.Context, arg ListMacerationsParams) ([]Maceration, error) {
	rows, err := q.db.Query(ctx, listMacerations, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Maceration
	for rows.Next() {
		var i Maceration
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ReceptionID,
			&i.WarehouseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
