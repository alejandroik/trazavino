// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: vineyard.sql

package generated

import (
	"context"
	"time"
)

const addVineyard = `-- name: AddVineyard :one
INSERT INTO vineyard (created_at, name)
VALUES ($1, $2)
RETURNING id
`

type AddVineyardParams struct {
	CreatedAt time.Time
	Name      string
}

func (q *Queries) AddVineyard(ctx context.Context, arg AddVineyardParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addVineyard, arg.CreatedAt, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getVineyard = `-- name: GetVineyard :one
SELECT id, created_at, updated_at, deleted_at, name
FROM vineyard
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVineyard(ctx context.Context, id int64) (Vineyard, error) {
	row := q.db.QueryRowContext(ctx, getVineyard, id)
	var i Vineyard
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}
