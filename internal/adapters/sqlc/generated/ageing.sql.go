// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: ageing.sql

package generated

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addAgeing = `-- name: AddAgeing :exec
INSERT INTO ageing (id, created_at, tank_id, cask_id)
VALUES ($1, $2, $3, $4)
`

type AddAgeingParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	TankID    uuid.UUID
	CaskID    uuid.UUID
}

func (q *Queries) AddAgeing(ctx context.Context, arg AddAgeingParams) error {
	_, err := q.db.ExecContext(ctx, addAgeing,
		arg.ID,
		arg.CreatedAt,
		arg.TankID,
		arg.CaskID,
	)
	return err
}

const findAgeing = `-- name: FindAgeing :one
SELECT ageing.id, ageing.created_at, ageing.updated_at, ageing.deleted_at, ageing.tank_id, ageing.cask_id
FROM ageing
         INNER JOIN process p on ageing.id = p.id
WHERE end_time IS NULL
  AND ageing.cask_id = $1
LIMIT 1
`

func (q *Queries) FindAgeing(ctx context.Context, caskID uuid.UUID) (Ageing, error) {
	row := q.db.QueryRowContext(ctx, findAgeing, caskID)
	var i Ageing
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TankID,
		&i.CaskID,
	)
	return i, err
}

const getAgeing = `-- name: GetAgeing :one
SELECT id, created_at, updated_at, deleted_at, tank_id, cask_id
FROM ageing
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAgeing(ctx context.Context, id uuid.UUID) (Ageing, error) {
	row := q.db.QueryRowContext(ctx, getAgeing, id)
	var i Ageing
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TankID,
		&i.CaskID,
	)
	return i, err
}

const listAgeings = `-- name: ListAgeings :many
SELECT id, created_at, updated_at, deleted_at, tank_id, cask_id
FROM ageing
ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type ListAgeingsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListAgeings(ctx context.Context, arg ListAgeingsParams) ([]Ageing, error) {
	rows, err := q.db.QueryContext(ctx, listAgeings, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ageing
	for rows.Next() {
		var i Ageing
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TankID,
			&i.CaskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
