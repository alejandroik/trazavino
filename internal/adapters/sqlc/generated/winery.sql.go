// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: winery.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addWinery = `-- name: AddWinery :exec
INSERT INTO winery (id, created_at, name)
VALUES ($1, $2, $3)
`

type AddWineryParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Name      string
}

func (q *Queries) AddWinery(ctx context.Context, arg AddWineryParams) error {
	_, err := q.db.ExecContext(ctx, addWinery, arg.ID, arg.CreatedAt, arg.Name)
	return err
}

const getWinery = `-- name: GetWinery :one
SELECT id, created_at, updated_at, deleted_at, name
FROM winery
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetWinery(ctx context.Context, id uuid.UUID) (Winery, error) {
	row := q.db.QueryRowContext(ctx, getWinery, id)
	var i Winery
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const listWinerys = `-- name: LIstWineries :many
SELECT id, created_at, updated_at, deleted_at, name
FROM winery
ORDER BY created_at DESC
    OFFSET $1 LIMIT $2
`

type ListWinerysParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListWinerys(ctx context.Context, arg ListWinerysParams) ([]Winery, error) {
	rows, err := q.db.QueryContext(ctx, listWinerys, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Winery
	for rows.Next() {
		var i Winery
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWinery = `-- name: UpdateWinery :exec
UPDATE winery
SET name       = COALESCE($2, name),
    updated_at = COALESCE($3, updated_at)
WHERE id = $1
`

type UpdateWineryParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdateWinery(ctx context.Context, arg UpdateWineryParams) error {
	_, err := q.db.ExecContext(ctx, updateWinery, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}
