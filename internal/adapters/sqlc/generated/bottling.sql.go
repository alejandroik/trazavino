// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: bottling.sql

package generated

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addBottling = `-- name: AddBottling :exec
INSERT INTO bottling (id, created_at, cask_id, wine_id, bottle_qty)
VALUES ($1, $2, $3, $4, $5)
`

type AddBottlingParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	CaskID    uuid.UUID
	WineID    uuid.UUID
	BottleQty int32
}

func (q *Queries) AddBottling(ctx context.Context, arg AddBottlingParams) error {
	_, err := q.db.ExecContext(ctx, addBottling,
		arg.ID,
		arg.CreatedAt,
		arg.CaskID,
		arg.WineID,
		arg.BottleQty,
	)
	return err
}

const getBottling = `-- name: GetBottling :one
SELECT id, created_at, updated_at, deleted_at, cask_id, bottle_qty, wine_id
FROM bottling
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBottling(ctx context.Context, id uuid.UUID) (Bottling, error) {
	row := q.db.QueryRowContext(ctx, getBottling, id)
	var i Bottling
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CaskID,
		&i.BottleQty,
		&i.WineID,
	)
	return i, err
}

const listBottlings = `-- name: ListBottlings :many
SELECT id, created_at, updated_at, deleted_at, cask_id, bottle_qty, wine_id
FROM bottling
ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type ListBottlingsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListBottlings(ctx context.Context, arg ListBottlingsParams) ([]Bottling, error) {
	rows, err := q.db.QueryContext(ctx, listBottlings, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bottling
	for rows.Next() {
		var i Bottling
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CaskID,
			&i.BottleQty,
			&i.WineID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
